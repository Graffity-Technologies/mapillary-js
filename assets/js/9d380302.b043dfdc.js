(self.webpackChunkmapillary_js_doc=self.webpackChunkmapillary_js_doc||[]).push([[2357],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(m.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,g=u["".concat(m,".").concat(d)]||u[d]||c[d]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4338:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m},default:function(){return p}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i={id:"component.tagdomain",title:"Enumeration: TagDomain",sidebar_label:"TagDomain",custom_edit_url:null},l={unversionedId:"enums/component.tagdomain",id:"enums/component.tagdomain",isDocsHomePage:!1,title:"Enumeration: TagDomain",description:"component.TagDomain",source:"@site/api/enums/component.tagdomain.md",sourceDirName:"enums",slug:"/enums/component.tagdomain",permalink:"/mapillary-js/api/enums/component.tagdomain",editUrl:null,version:"current",sidebar_label:"TagDomain",frontMatter:{id:"component.tagdomain",title:"Enumeration: TagDomain",sidebar_label:"TagDomain",custom_edit_url:null},sidebar:"api",previous:{title:"Enumeration: SliderConfigurationMode",permalink:"/mapillary-js/api/enums/component.sliderconfigurationmode"},next:{title:"Enumeration: TagMode",permalink:"/mapillary-js/api/enums/component.tagmode"}},m=[{value:"Enumeration members",id:"enumeration-members",children:[{value:"ThreeDimensional",id:"threedimensional",children:[]},{value:"TwoDimensional",id:"twodimensional",children:[]}]}],s={toc:m};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/mapillary-js/api/modules/component"},"component"),".TagDomain"),(0,o.kt)("p",null,"Enumeration for tag domains."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"readonly"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"description"))," Defines where lines between two vertices are treated\nas straight."),(0,o.kt)("p",null,"Only applicable for polygons. For rectangles lines between\nvertices are always treated as straight in the distorted 2D\nprojection and bended in the undistorted 3D space."),(0,o.kt)("h2",{id:"enumeration-members"},"Enumeration members"),(0,o.kt)("h3",{id:"threedimensional"},"ThreeDimensional"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"ThreeDimensional"),": = 1"),(0,o.kt)("p",null,"Treats lines as straight in the undistorted 3D space. If the\nimage is distorted this will result in bended lines when rendered\non the distorted 2D projection of the image."),(0,o.kt)("p",null,"Defined in: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/505da04b/src/component/tag/tag/TagDomain.ts#L26"},"component/tag/tag/TagDomain.ts:26")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"twodimensional"},"TwoDimensional"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"TwoDimensional"),": = 0"),(0,o.kt)("p",null,"Treats lines between two vertices as straight in the\ndistorted 2D projection, i.e. on the image. If the image\nis distorted this will result in bended lines when rendered\nin the undistorted 3D space."),(0,o.kt)("p",null,"Defined in: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/505da04b/src/component/tag/tag/TagDomain.ts#L19"},"component/tag/tag/TagDomain.ts:19")))}p.isMDXComponent=!0}}]);