"use strict";(self.webpackChunkmapillary_js_doc=self.webpackChunkmapillary_js_doc||[]).push([[6578],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=n,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(y,o(o({ref:t},p),{},{components:r})):a.createElement(y,o({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6184:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=r(2122),n=r(9756),i=(r(7294),r(3905)),o={id:"glossary",title:"Glossary"},l=void 0,s={unversionedId:"intro/glossary",id:"intro/glossary",isDocsHomePage:!1,title:"Glossary",description:"This glossary provides a non-exhaustive list of terms used in the MapillaryJS documentation and codebase.",source:"@site/docs/intro/glossary.md",sourceDirName:"intro",slug:"/intro/glossary",permalink:"/mapillary-js/docs/intro/glossary",editUrl:"https://github.com/mapillary/mapillary-js/edit/main/doc/docs/intro/glossary.md",version:"current",frontMatter:{id:"glossary",title:"Glossary"},sidebar:"docs",previous:{title:"Try MapillaryJS",permalink:"/mapillary-js/docs/intro/try"},next:{title:"Guide",permalink:"/mapillary-js/docs/main/guide"}},c=[{value:"Camera Capture",id:"camera-capture",children:[]},{value:"Image",id:"image",children:[]},{value:"Street Imagery Map",id:"street-imagery-map",children:[]}],p={toc:c};function u(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This glossary provides a non-exhaustive list of terms used in the MapillaryJS documentation and codebase."),(0,i.kt)("h2",{id:"camera-capture"},"Camera Capture"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Image#Still_or_moving"},"Still image")," captured by a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Camera"},"camera"),". It can be photographs but also frames extracted from a video."),(0,i.kt)("h2",{id:"image"},"Image"),(0,i.kt)("p",null,"The main MapillaryJS entity. An image consists of the texture of a ",(0,i.kt)("a",{parentName:"p",href:"/docs/intro/glossary#camera-capture"},"camera capture"),", metadata associated with that camera capture, and artifacts derived from the camera capture itself or the group of adjacent camera captures."),(0,i.kt)("h2",{id:"street-imagery-map"},"Street Imagery Map"),(0,i.kt)("p",null,"A map where the primary navigation and point of view are from the street perspective. The map is visualized through street imagery textures and geo-spatial data. MapillaryJS is an example of a street imagery map."))}u.isMDXComponent=!0}}]);