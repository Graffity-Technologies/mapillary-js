(self.webpackChunkmapillary_js_doc=self.webpackChunkmapillary_js_doc||[]).push([[3e3],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return d},kt:function(){return u}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(r),u=n,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return r?a.createElement(k,i(i({ref:t},d),{},{components:r})):a.createElement(k,i({ref:t},d))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var s=2;s<l;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},6219:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var a=r(2122),n=r(9756),l=(r(7294),r(3905)),i={id:"api.geometryproviderbase",title:"Class: GeometryProviderBase",sidebar_label:"GeometryProviderBase",custom_edit_url:null},o=void 0,p={unversionedId:"classes/api.geometryproviderbase",id:"classes/api.geometryproviderbase",isDocsHomePage:!1,title:"Class: GeometryProviderBase",description:"api.GeometryProviderBase",source:"@site/api/classes/api.geometryproviderbase.md",sourceDirName:"classes",slug:"/classes/api.geometryproviderbase",permalink:"/mapillary-js/api/classes/api.geometryproviderbase",editUrl:null,version:"current",frontMatter:{id:"api.geometryproviderbase",title:"Class: GeometryProviderBase",sidebar_label:"GeometryProviderBase",custom_edit_url:null},sidebar:"api",previous:{title:"DataProviderBase",permalink:"/mapillary-js/api/classes/api.dataproviderbase"},next:{title:"GraphDataProvider",permalink:"/mapillary-js/api/classes/api.graphdataprovider"}},s=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Methods",id:"methods",children:[{value:"bboxToCellIds",id:"bboxtocellids",children:[]},{value:"getAdjacent",id:"getadjacent",children:[]},{value:"getVertices",id:"getvertices",children:[]},{value:"lngLatToCellId",id:"lnglattocellid",children:[]}]}],d={toc:s};function m(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/modules/api"},"api"),".GeometryProviderBase"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"classdesc"))," Base class to extend if implementing a geometry\nprovider class."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class MyGeometryProvider extends GeometryProviderBase {\n     ...\n}\n")),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"GeometryProviderBase")),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.s2geometryprovider"},"S2GeometryProvider")))),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"new GeometryProviderBase"),"()"),(0,l.kt)("p",null,"Create a new geometry provider base instance."),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/c268f851/src/api/GeometryProviderBase.ts#L21"},"api/GeometryProviderBase.ts:21")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"bboxtocellids"},"bboxToCellIds"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"bboxToCellIds"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"sw"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ne"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"Convert a geodetic bounding box to the the minimum set\nof cell ids containing the bounding box."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"description"))," The bounding box needs\nto be sufficiently small to be contained in an area with the size\nof maximally four tiles. Up to nine adjacent tiles may be returned."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sw")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.lnglat"},"LngLat")),(0,l.kt)("td",{parentName:"tr",align:"left"},"South west corner of bounding box.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ne")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.lnglat"},"LngLat")),(0,l.kt)("td",{parentName:"tr",align:"left"},"North east corner of bounding box.")))),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"Array of cell ids."),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/c268f851/src/api/GeometryProviderBase.ts#L40"},"api/GeometryProviderBase.ts:40")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getadjacent"},"getAdjacent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getAdjacent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"cellId"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"Get the cell ids of all adjacent cells."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"description"))," In the case of approximately rectangular cells\nthis is typically the eight orthogonally and diagonally adjacent\ncells."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellId")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Id of cell.")))),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"Array of cell ids. No specific\norder is guaranteed."),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/c268f851/src/api/GeometryProviderBase.ts#L55"},"api/GeometryProviderBase.ts:55")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getvertices"},"getVertices"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getVertices"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"cellId"),"): ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},"LngLat"),"[]"),(0,l.kt)("p",null,"Get the vertices of a cell."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"description"))," The vertices form an unclosed\nclockwise polygon in the 2D longitude, latitude\nspace. No assumption on the position of the first\nvertex relative to the others can be made."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellId")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Id of cell.")))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},"LngLat"),"[]"),(0,l.kt)("p",null,"Unclosed clockwise polygon."),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/c268f851/src/api/GeometryProviderBase.ts#L70"},"api/GeometryProviderBase.ts:70")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"lnglattocellid"},"lngLatToCellId"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"lngLatToCellId"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"lngLat"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Convert geodetic coordinates to a cell id."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lngLat")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.lnglat"},"LngLat")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Longitude, latitude to convert.")))),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Cell id for the longitude, latitude."),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/c268f851/src/api/GeometryProviderBase.ts#L80"},"api/GeometryProviderBase.ts:80")))}m.isMDXComponent=!0}}]);