(self.webpackChunkmapillary_js_doc=self.webpackChunkmapillary_js_doc||[]).push([[6041],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return k}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),s=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),h=s(a),k=n,c=h["".concat(o,".").concat(k)]||h[k]||d[k]||l;return a?r.createElement(c,i(i({ref:t},m),{},{components:a})):r.createElement(c,i({ref:t},m))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=h;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<l;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},435:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return o},default:function(){return m}});var r=a(2122),n=a(9756),l=(a(7294),a(3905)),i={id:"api.geohashgeometryprovider",title:"Class: GeohashGeometryProvider",sidebar_label:"GeohashGeometryProvider",custom_edit_url:null},p={unversionedId:"classes/api.geohashgeometryprovider",id:"classes/api.geohashgeometryprovider",isDocsHomePage:!1,title:"Class: GeohashGeometryProvider",description:"api.GeohashGeometryProvider",source:"@site/api/classes/api.geohashgeometryprovider.md",sourceDirName:"classes",slug:"/classes/api.geohashgeometryprovider",permalink:"/mapillary-js/api/classes/api.geohashgeometryprovider",editUrl:null,version:"current",sidebar_label:"GeohashGeometryProvider",frontMatter:{id:"api.geohashgeometryprovider",title:"Class: GeohashGeometryProvider",sidebar_label:"GeohashGeometryProvider",custom_edit_url:null},sidebar:"api",previous:{title:"Class: FalcorDataProvider",permalink:"/mapillary-js/api/classes/api.falcordataprovider"},next:{title:"Class: GeometryProviderBase",permalink:"/mapillary-js/api/classes/api.geometryproviderbase"}},o=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Methods",id:"methods",children:[{value:"bboxToCellIds",id:"bboxtocellids",children:[]},{value:"getAdjacent",id:"getadjacent",children:[]},{value:"getVertices",id:"getvertices",children:[]},{value:"lngLatToCellId",id:"lnglattocellid",children:[]}]}],s={toc:o};function m(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/modules/api"},"api"),".GeohashGeometryProvider"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"classdesc"))," Geometry provider based on geohash cells."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"class MyDataProvider extends DataProviderBase {\n     ...\n}\n\nconst geometryProvider = new GeohashGeometryProvider();\nconst dataProvider = new MyDataProvider(geohashGeometryProvider);\n")),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geometryproviderbase"},(0,l.kt)("em",{parentName:"a"},"GeometryProviderBase"))),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("strong",{parentName:"p"},"GeohashGeometryProvider")))),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"+"," ",(0,l.kt)("strong",{parentName:"p"},"new GeohashGeometryProvider"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"_level?"),": ",(0,l.kt)("em",{parentName:"p"},"number"),"): ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geohashgeometryprovider"},(0,l.kt)("em",{parentName:"a"},"GeohashGeometryProvider"))),(0,l.kt)("p",null,"Create a new geohash geometry provider instance."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_level")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"7")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geohashgeometryprovider"},(0,l.kt)("em",{parentName:"a"},"GeohashGeometryProvider"))),(0,l.kt)("p",null,"Overrides: ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geometryproviderbase"},"GeometryProviderBase")),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/002a898b/src/api/GeohashGeometryProvider.ts#L22"},"api/GeohashGeometryProvider.ts:22")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"bboxtocellids"},"bboxToCellIds"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"bboxToCellIds"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"sw"),": ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat")),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ne"),": ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat")),"): ",(0,l.kt)("em",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"Encode the minimum set of geohash tiles containing a bounding box."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"description"))," The current algorithm does expect the bounding box\nto be sufficiently small to be contained in an area with the size\nof maximally four tiles. Up to nine adjacent tiles may be returned.\nThe method currently uses the largest side as the threshold leading to\nmore tiles being returned than needed in edge cases."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sw")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"South west corner of bounding box.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ne")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"North east corner of bounding box.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"The geohash tiles containing the bounding box."),(0,l.kt)("p",null,"Overrides: ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geometryproviderbase"},"GeometryProviderBase")),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/002a898b/src/api/GeohashGeometryProvider.ts#L42"},"api/GeohashGeometryProvider.ts:42")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getadjacent"},"getAdjacent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getAdjacent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"cellId"),": ",(0,l.kt)("em",{parentName:"p"},"string"),"): ",(0,l.kt)("em",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"inheritdoc"))),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellId")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"string"),"[]"),(0,l.kt)("p",null,"Overrides: ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geometryproviderbase"},"GeometryProviderBase")),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/002a898b/src/api/GeohashGeometryProvider.ts#L57"},"api/GeohashGeometryProvider.ts:57")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getvertices"},"getVertices"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getVertices"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"cellId"),": ",(0,l.kt)("em",{parentName:"p"},"string"),"): ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat")),"[]"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"inheritdoc"))),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellId")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"string"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat")),"[]"),(0,l.kt)("p",null,"Overrides: ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geometryproviderbase"},"GeometryProviderBase")),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/002a898b/src/api/GeohashGeometryProvider.ts#L47"},"api/GeohashGeometryProvider.ts:47")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"lnglattocellid"},"lngLatToCellId"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"lngLatToCellId"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"lngLat"),": ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat")),"): ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"Encode the geohash tile for geodetic coordinates."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lngLat")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/mapillary-js/api/interfaces/api.lnglat"},(0,l.kt)("em",{parentName:"a"},"LngLat"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"Longitude, latitude to encode.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"The geohash tile for the lat, lon and precision."),(0,l.kt)("p",null,"Overrides: ",(0,l.kt)("a",{parentName:"p",href:"/mapillary-js/api/classes/api.geometryproviderbase"},"GeometryProviderBase")),(0,l.kt)("p",null,"Defined in: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mapillary/mapillary-js/blob/002a898b/src/api/GeohashGeometryProvider.ts#L79"},"api/GeohashGeometryProvider.ts:79")))}m.isMDXComponent=!0}}]);